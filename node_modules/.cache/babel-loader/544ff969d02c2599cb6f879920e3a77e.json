{"ast":null,"code":"const {\n  MerkleTree\n} = require('merkletreejs');\n\nconst keccak256 = require('keccak256');\n\nconst {\n  soliditySha3\n} = require('web3-utils');\n\nimport { Buffer } from \"buffer/\";\nwindow.Buffer = window.Buffer || Buffer;\n\nclass Merkle {\n  constructor() {\n    // We'll need to hardcode these whitelists for the web server to\n    // instantiate the Merkle Trees onto the frontend.\n    // The issue is that require('fs') does not exist on the browser, \n    // so the CSV files cannot be read on the frontend because Node.js\n    // does not exist in the browser.\n    this.whitelistAddresses = [[['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2], ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7], ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5], ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 2], ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6], ['0xC1bC29ef5Cff0C1958DF3426Ebc765f0A3230678', 1]], [['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2], ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7], ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5], ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 6], ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6], ['0x00000000f0a3bF37085E13814053a92C063635FC', 1]], [['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2], ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7], ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5], ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 2], ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6], ['0x00000000f0a3bF37085E13814053a92C063635FC', 1]]];\n    this.merkleTrees = []; // Use the code below and the commented run() function at the bottom \n    // of the file when you want to run this script by itself as\n    // \"node utils/merkle.js\" on the command line.\n    // var fs = require('fs');\n    // const readFile = (filePath) => {\n    //   try {\n    //     const data = fs.readFileSync(filePath, 'utf8');\n    //     const addresses = data.split('\\n');\n    //     return addresses;\n    //   } catch (err) {\n    //     console.log(err);\n    //   }\n    // };\n    // let d = readFile('./utils/whitelists/0.csv');\n    // this.whitelistAddresses[0] = d;\n    // console.log('loaded file 0.csv');\n    // d = readFile('./utils/whitelists/1.csv');\n    // this.whitelistAddresses[1] = d;\n    // console.log('loaded file 1.csv');\n    // d = readFile('./utils/whitelists/2.csv');\n    // this.whitelistAddresses[2] = d;\n    // console.log('loaded file 2.csv');\n    // console.log('Finished loading data from CSVs...');\n    // console.log('Generating MerkleTrees...');\n\n    this.merkleTrees[0] = this.generateMerkleTree(0);\n    this.merkleTrees[1] = this.generateMerkleTree(1);\n    this.merkleTrees[2] = this.generateMerkleTree(2); // console.log('Printing the trees...');\n    // console.log('Tree 0\\n', this.merkleTrees[0].toString());\n    // console.log('Tree 1\\n', this.merkleTrees[1].toString());\n    // console.log('Tree 2\\n', this.merkleTrees[2].toString());\n    // console.log('\\n================\\n\\n');\n  }\n\n  generateMerkleTree(phase) {\n    const leaves = this.whitelistAddresses[phase].map(addr => soliditySha3(addr[0], addr[1]));\n    var tree = new MerkleTree(leaves, keccak256, {\n      sortPairs: true\n    });\n    return tree;\n  }\n\n  getMerkleRoot(phase) {\n    var tree = this.merkleTrees[phase];\n    return tree.getRoot();\n  }\n\n  getProof(addr, qty, phase) {\n    var tree = this.merkleTrees[phase];\n    return tree.getHexProof(soliditySha3(addr, qty));\n  }\n\n  run() {\n    console.log('m.getMerkleRoot(0):\\t', `0x${m.getMerkleRoot(0).toString('hex')}`);\n    console.log('m.getMerkleRoot(1):\\t', `0x${m.getMerkleRoot(1).toString('hex')}`);\n    console.log('m.getMerkleRoot(2):\\t', `0x${m.getMerkleRoot(2).toString('hex')}`); // console.log(\n    //   'm.getProof(0x082Fc1776d44f69988C475958A0505A5BC2cd77b):\\n\\t\\t\\t',\n    //   JSON.stringify(\n    //     m.getProof('0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 0),\n    //   ),\n    // );\n    // console.log(\n    //   'm.getProof(0x00000000f0a3bF37085E13814053a92C063635FC):\\n\\t\\t\\t',\n    //   JSON.stringify(\n    //     m.getProof('0x00000000f0a3bF37085E13814053a92C063635FC', 0),\n    //   ),\n    // );\n  }\n\n}\n\nconst m = new Merkle();\nm.run();\nvar proof = m.getProof('0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2, 0);\nconsole.log(proof); // pass proof / qty into contract mint call\n//export default m;","map":{"version":3,"names":["MerkleTree","require","keccak256","soliditySha3","Buffer","window","Merkle","constructor","whitelistAddresses","merkleTrees","generateMerkleTree","phase","leaves","map","addr","tree","sortPairs","getMerkleRoot","getRoot","getProof","qty","getHexProof","run","console","log","m","toString","proof"],"sources":["B:/SKR/website/minting/2/Archive/src/utils/Merkle.js"],"sourcesContent":["const { MerkleTree } = require('merkletreejs');\r\nconst keccak256 = require('keccak256');\r\nconst { soliditySha3 } = require('web3-utils');\r\nimport { Buffer } from \"buffer/\";\r\nwindow.Buffer = window.Buffer || Buffer;\r\n\r\nclass Merkle {\r\n  constructor() {\r\n\r\n    // We'll need to hardcode these whitelists for the web server to\r\n    // instantiate the Merkle Trees onto the frontend.\r\n\r\n    // The issue is that require('fs') does not exist on the browser, \r\n    // so the CSV files cannot be read on the frontend because Node.js\r\n    // does not exist in the browser.\r\n    this.whitelistAddresses = [\r\n      [\r\n        ['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2],\r\n        ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7],\r\n        ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5],\r\n        ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 2],\r\n        ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6],\r\n        ['0xC1bC29ef5Cff0C1958DF3426Ebc765f0A3230678', 1],\r\n      ],\r\n      [\r\n        ['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2],\r\n        ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7],\r\n        ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5],\r\n        ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 6],\r\n        ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6],\r\n        ['0x00000000f0a3bF37085E13814053a92C063635FC', 1],\r\n      ],\r\n      [\r\n        ['0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42', 2],\r\n        ['0x8845938e23D338552fA58cdd1B599C8eab1bF597', 7],\r\n        ['0x2CFe89E3BAa8845954FbD257Ad351e9f6570291a', 5],\r\n        ['0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 2],\r\n        ['0x00000000236AA20a26dbdD359362f4D517E6138E', 6],\r\n        ['0x00000000f0a3bF37085E13814053a92C063635FC', 1],\r\n      ],\r\n    ];\r\n    this.merkleTrees = [];\r\n    \r\n\r\n    // Use the code below and the commented run() function at the bottom \r\n    // of the file when you want to run this script by itself as\r\n    // \"node utils/merkle.js\" on the command line.\r\n\r\n    // var fs = require('fs');\r\n    // const readFile = (filePath) => {\r\n    //   try {\r\n    //     const data = fs.readFileSync(filePath, 'utf8');\r\n    //     const addresses = data.split('\\n');\r\n    //     return addresses;\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // };\r\n    // let d = readFile('./utils/whitelists/0.csv');\r\n    // this.whitelistAddresses[0] = d;\r\n    // console.log('loaded file 0.csv');\r\n    // d = readFile('./utils/whitelists/1.csv');\r\n    // this.whitelistAddresses[1] = d;\r\n    // console.log('loaded file 1.csv');\r\n    // d = readFile('./utils/whitelists/2.csv');\r\n    // this.whitelistAddresses[2] = d;\r\n    // console.log('loaded file 2.csv');\r\n    // console.log('Finished loading data from CSVs...');\r\n\r\n    // console.log('Generating MerkleTrees...');\r\n    this.merkleTrees[0] = this.generateMerkleTree(0);\r\n    this.merkleTrees[1] = this.generateMerkleTree(1);\r\n    this.merkleTrees[2] = this.generateMerkleTree(2);\r\n\r\n    // console.log('Printing the trees...');\r\n    // console.log('Tree 0\\n', this.merkleTrees[0].toString());\r\n    // console.log('Tree 1\\n', this.merkleTrees[1].toString());\r\n    // console.log('Tree 2\\n', this.merkleTrees[2].toString());\r\n\r\n    // console.log('\\n================\\n\\n');\r\n  }\r\n\r\n  generateMerkleTree(phase) {\r\n    const leaves = this.whitelistAddresses[phase].map((addr) =>\r\n      soliditySha3(addr[0], addr[1]),\r\n    );\r\n    var tree = new MerkleTree(leaves, keccak256, { sortPairs: true });\r\n    return tree;\r\n  }\r\n\r\n  getMerkleRoot(phase) {\r\n    var tree = this.merkleTrees[phase];\r\n    return tree.getRoot();\r\n  }\r\n\r\n  getProof(addr, qty, phase) {\r\n    var tree = this.merkleTrees[phase];\r\n    return tree.getHexProof(soliditySha3(addr, qty));\r\n  }\r\n\r\n  run() {\r\n    console.log(\r\n      'm.getMerkleRoot(0):\\t',\r\n      `0x${m.getMerkleRoot(0).toString('hex')}`,\r\n    );\r\n    console.log(\r\n      'm.getMerkleRoot(1):\\t',\r\n      `0x${m.getMerkleRoot(1).toString('hex')}`,\r\n    );\r\n    console.log(\r\n      'm.getMerkleRoot(2):\\t',\r\n      `0x${m.getMerkleRoot(2).toString('hex')}`,\r\n    );\r\n\r\n    // console.log(\r\n    //   'm.getProof(0x082Fc1776d44f69988C475958A0505A5BC2cd77b):\\n\\t\\t\\t',\r\n    //   JSON.stringify(\r\n    //     m.getProof('0x082Fc1776d44f69988C475958A0505A5BC2cd77b', 0),\r\n    //   ),\r\n    // );\r\n    // console.log(\r\n    //   'm.getProof(0x00000000f0a3bF37085E13814053a92C063635FC):\\n\\t\\t\\t',\r\n    //   JSON.stringify(\r\n    //     m.getProof('0x00000000f0a3bF37085E13814053a92C063635FC', 0),\r\n    //   ),\r\n    // );\r\n  }\r\n}\r\n\r\nconst m = new Merkle();\r\n\r\nm.run();\r\nvar proof = m.getProof('0x91769843CEc84Adcf7A48DF9DBd9694A39f44b42',2,0);\r\nconsole.log(proof);\r\n// pass proof / qty into contract mint call\r\n\r\n//export default m;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}